#### TODO
- TODO - 0
    - Need to have a CStorClusterDefault CR & corresponding reconciler
        - Its job will be to set defaults to CStorClusterConfig
        - Then set the SetDefaultsCompleted condition
        - This condition will be looked up by the reconciler that creates
            CStorClusterPlan
        - This will eliminate the current hot loop path experienced by 
            CStorClusterConfig reconciler that sets the defaults.
    - Create EVENTs against the watch instance in case of errors at reconciler
    - Deterministic names
        - CStorClusterStorageSet(s) - **DONE**
            - make use of the node that is set in its spec
            - use the node UID as its name's suffix
            - use CStorClusterConfig name as its name's prefix
            - e.g. <CStorClusterConfig name>-<node uid that used in StorageSet during later's creation>
        - Storage(s) - **DONE**
            - make use of CStorClusterStorageSet name as its name's prefix
            - make use of count index as its name's suffix
            - e.g. <storagesetname>-1, <storagesetname>-2, etc
            - count can be used since each Storage will have exactly same spec content
        - Remove / Scale Down should be done to young disks
            - current logic removes young nodes.
            - however, young nodes may attach old disks i.e. bigger data
    - Finish the TODO markers in the code
    - Create/Update construction should be same **In Progress**
        - This is very important to make the code adhere to being idempotent
    - Check use of runtime.DefaultUnstructuredConverter.FromUnstructured(...)
    - Use k8s Events to show errors
- TODO - 1
    - write delete contollers
- TODO - 2
    - update storage provisioner codebase
    - change ddp to dao
    - add status.conditions to storage API
    - set Storage's UID against PVC's annotations
- TODO - 3
    - refactor clusterconfig reconciler
    - manage status/conditions of clusterconfig
    - refactor reconcile logic to:
        - Defaulter,
        - CStorClusterPlanner & 
        - NodePlanner
- TODO - 4
    - test scripts / demos
- TODO - 5
    - Unit Tests for cstorpoolauto
- TODO - 6
    - refactor storage provisioner to use metac
- TODO - 7
    - Unit Test storage provisioner
- TODO - 8
    - Installer & UnInstaller for DAO
- TODO - 9
    - e2e test controller(s) for cstorpoolauto
- TODO - 10
    - e2e test controller(s) for storage provisioner

#### FUTURE
- pool spread logic might be required
    - e.g. pool nodes should be unique in a cluster
    - e.g. spread pools across zones, DCs etc
    - e.g. pool node priority
    - Note: this is different from NodeSelector
- below is a sample yaml fragment for pool spread logic
```yaml
poolSpreadPolicy:
    type: roundrobin
    terms:
    - name: ABC
      percent: 0.2
    - name: DEF
      percent: 0.8
```
- Cluster disruption budget may be required
```
clusterDisruptionBudget:
    maxAvailable:
    minAvailable:
```

### Old Design - v0.1.0

#### Sync CSPCAutoKeeper
    - watch - CSPCAuto
    - attachments - BlockDevices (available & annotated)
    - sync - Create/Apply CSPCAutoKeeper with BlockDevices that are annotated

#### Sync Storage & BlockDevices
    - watch - CSPCAuto
    - attachments - BlockDevices (available)
    - attachments - Storage (annotated)
    - sync - Iterate BlockDevices:
        - Build map of BlockDevices with Annotation
        - Build map of BlockDevices without Annotation
    - sync - Iterate Storage
        - Build map of Storages with Annotation
    - sync - Build missing CSPIList:
        - Create Storage with Annotation
    - sync - Update BlockDevices map with Annotation

#### Sync CSPC
    - watch - cspcauto
    - attachments - CSPCAutoKeeper
    - attachments - CSPC (annotated/name)
    - sync - Skip reconcile if CSPC is already available
    - sync - Create CSPC if & only if CSPIList matches CSPCAutoKeeper

```yaml
kind: CSPCAutoKeeper
spec:
  cspiList:
    items:
    - nodeLabel: map[string]string
      diskCount: *int                   # desired disk count
      diskCapacity: resource.Quantity   # desired disk capacity
      blockDevices: []string            # actual block devices
      lastUpdatedTimestamp: *time       # TODO
      lastTransitionTimestamp: *time    # TODO
```

### TODO
- Validations against pool type
- UT on slice selector
- UT for all sync/reconcile functions