### Design v0.2.0
#### TODO
- TODO - 0
    - Workflow:
        CStorClusterConfig
        -> CStorClusterPlan
        -> CStorClusterStorageSet (n)
        -> Storage (n)
        -> BlockDevice (n)
    - [1] **BlockDevice controller**: Associate Storage with BlockDevice
        - NOTE: Name of Storage = Name of PVC
        - NOTE: PVC is associated to PV
        - NOTE: BD contains the PV name in its path-id or so
        - Storage is the watch
            - Filter with particular annotations
        - CStorClusterStorageSet is the attachment
            - Filter based on the watch's annotation UID matching this instance' UID
        - BD is an attachment (this becomes a huge number if not filtered)
            - Filter those that have path-id or so
        - PVC is an attachment
            - Filter those with annotation of Storage's UID
            - Find its PV
            - Find corresponding BD whose path-id has PV name
            - Are there multiple BDs? Bubble it as an error
        - Annotate BlockDevice with CStorClusterPlan UID if BD's status is available
        - Annotate BlockDevice with CStorClusterStorageSet UID if BD's status is available
        - Bubble up as error if BD's status is error
    - [2] **CStorPoolCluster controller**: Create a CStorPoolCluster
        - CStorClusterPlan is the watch
        - CStorClusterStorageSet are the attachments
            - Filter them by annotation with CStorClusterPlan's UID
        - BD are the attachments
            - Filter them by annotation that has CStorClusterPlan's UID
        - Create CStorPoolCluster by using the nodename & corresponding blockdevices
- TODO - 1
    - update storage provisioner codebase
    - change ddp to dao
    - add status.conditions to storage API
    - set Storage's UID against PVC's annotations
- TODO - 2
    - refactor clusterconfig reconciler
    - manage status/conditions of clusterconfig
    - refactor reconcile logic to:
        - Defaulter,
        - CStorClusterPlanner & 
        - NodePlanner
- TODO - 3
    - write delete contollers
- TODO - 4
    - manual tests
- TODO - 5
    - Unit Tests for cstorpoolauto
- TODO - 6
    - refactor storage provisioner to use metac
- TODO - 7
    - Unit Test storage provisioner
- TODO - 8
    - Installer & UnInstaller for DAO
- TODO - 9
    - e2e test controller(s) for cstorpoolauto
- TODO - 10
    - e2e test controller(s) for storage provisioner

#### FUTURE
- pool spread logic might be required
    - e.g. pool nodes should be unique in a cluster
    - e.g. spread pools across zones, DCs etc
    - e.g. pool node priority
    - Note: this is different from NodeSelector
- below is a sample yaml fragment for pool spread logic
```yaml
poolSpreadPolicy:
    type: roundrobin
    terms:
    - name: ABC
      percent: 0.2
    - name: DEF
      percent: 0.8
```
- Cluster disruption budget may be required
```
clusterDisruptionBudget:
    maxAvailable:
    minAvailable:
```

### Old Design - v0.1.0

#### Sync CSPCAutoKeeper
    - watch - CSPCAuto
    - attachments - BlockDevices (available & annotated)
    - sync - Create/Apply CSPCAutoKeeper with BlockDevices that are annotated

#### Sync Storage & BlockDevices
    - watch - CSPCAuto
    - attachments - BlockDevices (available)
    - attachments - Storage (annotated)
    - sync - Iterate BlockDevices:
        - Build map of BlockDevices with Annotation
        - Build map of BlockDevices without Annotation
    - sync - Iterate Storage
        - Build map of Storages with Annotation
    - sync - Build missing CSPIList:
        - Create Storage with Annotation
    - sync - Update BlockDevices map with Annotation

#### Sync CSPC
    - watch - cspcauto
    - attachments - CSPCAutoKeeper
    - attachments - CSPC (annotated/name)
    - sync - Skip reconcile if CSPC is already available
    - sync - Create CSPC if & only if CSPIList matches CSPCAutoKeeper

```yaml
kind: CSPCAutoKeeper
spec:
  cspiList:
    items:
    - nodeLabel: map[string]string
      diskCount: *int                   # desired disk count
      diskCapacity: resource.Quantity   # desired disk capacity
      blockDevices: []string            # actual block devices
      lastUpdatedTimestamp: *time       # TODO
      lastTransitionTimestamp: *time    # TODO
```

### TODO
- Validations against pool type
- UT on slice selector
- UT for all sync/reconcile functions